<?php
/**
 * Mageplaza
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Mageplaza.com license that is
 * available through the world-wide-web at this URL:
 * https://www.mageplaza.com/LICENSE.txt
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade this extension to newer
 * version in the future.
 *
 * @category    Mageplaza
 * @package     Mageplaza_ExtraFee
 * @copyright   Copyright (c) Mageplaza (https://www.mageplaza.com/)
 * @license     https://www.mageplaza.com/LICENSE.txt
 */

namespace Mageplaza\ExtraFee\Model\Rule\Condition;

use Magento\Customer\Model\Customer\Attribute\Source\Website;
use Magento\Customer\Model\CustomerFactory;
use Magento\Framework\Model\AbstractModel;
use Magento\Rule\Model\Condition\AbstractCondition;
use Magento\Rule\Model\Condition\Context;
use Magento\Store\Model\System\Store;

/**
 * Class Customer
 * @package Mageplaza\ExtraFee\Model\Rule\Condition
 */
class Customer extends AbstractCondition
{
    /**
     * @var Website
     */
    protected $website;

    /**
     * @var Store
     */
    protected $store;

    /**
     * @var CustomerFactory
     */
    protected $customerFactory;

    /**
     * Customer constructor.
     *
     * @param Context $context
     * @param Website $website
     * @param Store $store
     * @param CustomerFactory $customerFactory
     * @param array $data
     */
    public function __construct(
        Context $context,
        Website $website,
        Store $store,
        CustomerFactory $customerFactory,
        array $data = []
    ) {
        $this->website         = $website;
        $this->store           = $store;
        $this->customerFactory = $customerFactory;
        parent::__construct($context, $data);
    }

    /**
     * Load attribute options
     *
     * @return $this|AbstractCondition
     */
    public function loadAttributeOptions()
    {
        $attributes = [
            'website_id'  => __('Associate to Website'),
            'create_in'   => __('Created In'),
            'created_at'  => __('Created At'),
            'customer_id' => __('Customer ID'),
            'dob'         => __('Date of Birth'),
            'email'       => __('Email'),
            'firstname'   => __('First Name'),
            'gender'      => __('Gender'),
            'lastname'    => __('Last Name'),
            'middlename'  => __('Middle Name'),
            'prefix'      => __('Name Prefix'),
            'suffix'      => __('Name Suffix'),
            'taxvat'      => __('Tax/VAT Number'),
            'updated_at'  => __('Updated At')
        ];

        $this->setAttributeOption($attributes);

        return $this;
    }

    /**
     * @return AbstractCondition
     */
    public function getAttributeElement()
    {
        $element = parent::getAttributeElement();
        $element->setShowAsText(true);

        return $element;
    }

    /**
     * @return string
     */
    public function getInputType()
    {
        switch ($this->getAttribute()) {
            case 'created_at':
            case 'dob':
            case 'updated_at':
                return 'date';

            case 'website_id':
            case 'create_in':
            case 'gender':
                return 'select';
        }

        return 'string';
    }

    /**
     * @return array
     */
    public function getDefaultOperatorInputByType()
    {
        return parent::getDefaultOperatorInputByType(); // TODO: Change the autogenerated stub
    }

    /**
     * @return Customer
     */
    public function getValueElement()
    {
        $element = parent::getValueElement();

        switch ($this->getInputType()) {
            case 'date':
                $element->setClass('hasDatepicker');
                $element->setExplicitApply(true);
                break;
        }

        return $element;
    }

    /**
     * @return string
     */
    public function getValueElementType()
    {
        switch ($this->getAttribute()) {
            case 'created_at':
            case 'dob':
            case 'updated_at':
                return 'date';

            case 'website_id':
            case 'create_in':
            case 'gender':
                return 'select';
        }

        return 'text';
    }

    /**
     * @return array|mixed
     */
    public function getValueSelectOptions()
    {
        if (!$this->hasData('value_select_options')) {
            switch ($this->getAttribute()) {
                case 'website_id':
                    $options = $this->website->getAllOptions();
                    break;
                case 'create_in':
                    $options = $this->store->toOptionArray();
                    break;
                case 'gender':
                    $options = [
                        ['value' => 1, 'label' => 'Male'],
                        ['value' => 2, 'label' => 'Female'],
                        ['value' => 3, 'label' => 'Not Specified']
                    ];
                    break;
                default:
                    $options = [];
            }
            $this->setData('value_select_options', $options);
        }

        return $this->getData('value_select_options');
    }

    /**
     * @param string $date
     *
     * @return false|string
     */
    public function formatTime($date)
    {
        $currentDate = date_create($date);
        $currentDate->setTime(0, 0);

        return date_format($currentDate, 'Y-m-d H:i:s');
    }

    /**
     * @param AbstractModel $model
     *
     * @return bool
     */
    public function validate(AbstractModel $model)
    {
        $customer           = $this->customerFactory->create()->load($model->getCustomerId());
        $data               = $customer->getData();
        $data['created_at'] = $customer->getCreatedAt() ? $this->formatTime($customer->getCreatedAt()) : null;
        $data['dob']        = $customer->getDob() ? $this->formatTime($customer->getDob()) : null;
        $data['updated_at'] = $customer->getUpdatedAt() ? $this->formatTime($customer->getUpdatedAt()) : null;
        $data['create_in']  = $customer->getStore()->getId();
        $model->addData($data);

        return parent::validate($model);
    }
}
